clear variables
clc
close all
network_name = "DataExpand_Network1";
inputs = ReadYaml(sprintf('Data/%s_amigo_config.yaml',network_name));
dataset = ReadYaml(sprintf('Data/%s.yaml',network_name));

%% transform fields
inputs.model.st_names = char(inputs.model.st_names');

inputs.model.par_names = char(inputs.model.par_names'); 
inputs.model.par = cell2mat(inputs.model.par');

inputs.model.eqns = char(inputs.model.eqns);

inputs.model.stimulus_names = char(inputs.model.stimulus_names');

model_name = inputs.pathd.results_folder;


column_config.experiment_id = dataset.experiment_id.exp_id;
column_config.experiment_time = dataset.measurement_time.t;
column_config.stimulus_columns = struct2cell(dataset.inputs)';
column_config.readout_columns = struct2cell(dataset.states)';
column_config.readout_std_columns = struct2cell(dataset.measurement_error)';   
column_config.lookup_mode = 'exact';

exp_idx = cell2mat(inputs.exp_info.training_data);
inputs.exps=load_data(strcat('Data/',model_name,'.csv'),exp_idx,column_config);

inputs.exps.obs_names = repmat({char(inputs.exp_info.obs_names')},1,inputs.exps.n_exp);
inputs.exps.obs = repmat({char(inputs.exp_info.obs')},1,inputs.exps.n_exp);


%% clean up the inputs struct
% remove the python generated field to prevent Amigo complaining
inputs = rmfield(inputs,'exp_info');

%% Model execution
inputs.model.names_type='custom';
inouts.model.input_model_type='charmodelC';
inputs.model.AMIGOsensrhs=0;

% if ~isfolder('Models/AutoGeneratedC/')
%     mkdir('Models/AutoGeneratedC/')
% end

inputs.model.odes_file=['Models/AutoGeneratedC/' model_name '.c'];
inputs.model.mexfile=['Models/AutoGeneratedC/' model_name 'CostMex'];
inputs.model.exe_type='costMex';
inputs.model.overwrite_model=1;
inputs.model.compile_model=1;

inputs.model.cvodes_include=[];
inputs.model.debugmode=0;
inputs.model.shownetwork=0;

%% Setp parameter bounds
inputs.PEsol=set_parameter_bounds(inputs.model.par);

%% Set ODE solver settings
inputs.ivpsol=get_solver_settings();

%% Preprocess and compile
[inputs privstruct]=AMIGO_Prep(inputs);

%% test out model calibration
sbl_config.parEst.eSS.dim_refset=20;
sbl_config.parEst.eSS.ndiverse=200;
sbl_config.parEst.eSS.local.n1=3;
sbl_config.parEst.eSS.local.n2=3;
sbl_config.parEst.eSS.maxeval=5000;
sbl_config.parEst.eSS.maxtime=inf;
sbl_config.parEst.eSS.local.solver='fmincon';
sbl_config.parEst.eSS.local.finish=0;


SBL_fitModel(inputs,privstruct,sbl_config)


function ivpsol= get_solver_settings()

ivpsol.ivpsolver='cvodes';
ivpsol.senssolver='cvodes';
ivpsol.rtol=1e-6;
ivpsol.atol=1e-6;
ivpsol.ivp_maxnumsteps=1e5;
ivpsol.nthreads=4;

end

function PESol=set_parameter_bounds(vguess)
%%%%%
% explicitly setting global_theta_guess, becaue amigo sets it to a scalar
% (could be a results of model formatting)
PESol.global_theta_guess = vguess; 
%%%%%
PESol.global_theta_max=vguess;
PESol.global_theta_max(PESol.global_theta_max>0)=PESol.global_theta_max(PESol.global_theta_max>0).*10;
PESol.global_theta_max(PESol.global_theta_max<=0)=0;
PESol.global_theta_min=vguess;
PESol.global_theta_min(PESol.global_theta_min<0)=PESol.global_theta_min(PESol.global_theta_min<0).*10;
PESol.global_theta_min(PESol.global_theta_min>=0)=0;
   
end
